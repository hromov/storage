// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/hromov/storage/domain/storage"
)

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockFileService) Save(c storage.FileCategory, fileName string, file io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", c, fileName, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFileServiceMockRecorder) Save(c, fileName, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFileService)(nil).Save), c, fileName, file)
}

// MockEventsService is a mock of EventsService interface.
type MockEventsService struct {
	ctrl     *gomock.Controller
	recorder *MockEventsServiceMockRecorder
}

// MockEventsServiceMockRecorder is the mock recorder for MockEventsService.
type MockEventsServiceMockRecorder struct {
	mock *MockEventsService
}

// NewMockEventsService creates a new mock instance.
func NewMockEventsService(ctrl *gomock.Controller) *MockEventsService {
	mock := &MockEventsService{ctrl: ctrl}
	mock.recorder = &MockEventsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsService) EXPECT() *MockEventsServiceMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockEventsService) Push(arg0 storage.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockEventsServiceMockRecorder) Push(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockEventsService)(nil).Push), arg0)
}
